apply plugin: 'java-library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'jacoco'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

ext {
    bintrayRepo = 'Kotlin2Java-Compat' // your repo name
    bintrayName = 'k2j-compat' // has to be same as your library module name
    publishedGroupId = 'com.github.alexdochioiu' // your module package name
    libraryName = 'k2j-compat'
    artifact = 'k2j-compat' // has to be same as your library module name
    libraryDescription = 'Kotlin 2 Java Compat for Scope Functions'
    siteUrl = 'https://github.com/AlexDochioiu/K2J-Compat'
    issuesUrl = 'https://github.com/AlexDochioiu/K2J-Compat/issues'
    gitUrl = 'https://github.com/AlexDochioiu/K2J-Compat.git'
    libLabels = ['Android', 'JeeFo', 'AlexDochioiu', "Kotlin", "Java", "Compat", "let", "also", "takeUnless", "takeIf"]
    libraryVersion = "1.0.0"
    developerId = 'jeefo'
    developerName = 'AlexDochioiu'
    developerEmail = 'dochioiu.alex@gmail.com'
    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

group = publishedGroupId   // Maven Group ID for the artifact

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
        //xml.destination file("${buildDir}/jacocoCoverage")
    }
}

version = libraryVersion

task sourcesJarProcessor(type: Jar) {
    from sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadocProcessor(type: Javadoc) {
    source = sourceSets.main.java.srcDirs
    classpath = sourceSets.main.runtimeClasspath
    //classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJarProcessor(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJarProcessor
    archives sourcesJarProcessor
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        labels = libLabels
        issueTrackerUrl = issuesUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}
